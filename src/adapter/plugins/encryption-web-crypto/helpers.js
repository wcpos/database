import{b64DecodeUnicode as t,b64EncodeUnicode as r,randomCouchString as e}from"rxdb";export var GENERATE_KEY_KEY_USAGES=["encrypt","decrypt"];export var KEY_FORMAT="jwk";export var TEXT_ENCODER=new TextEncoder;export var TEXT_DECODER=new TextDecoder;export var MINIMUM_PASSWORD_LENGTH=8;export function getPasswordKey(t){return crypto.subtle.importKey("raw",TEXT_ENCODER.encode(t),"PBKDF2",!1,["deriveKey"])}export function getDefaultSeed(){return b642ab("Cydnw5jCrQoBL8K1GsK5GMKDBynCgA==")}export async function getCryptoKey(t,r,e){var n=await getPasswordKey(t);return await crypto.subtle.deriveKey({name:"PBKDF2",salt:e,iterations:784,hash:"SHA-256"},n,getSettingsForAlgoritm(r),!1,GENERATE_KEY_KEY_USAGES)}export function getSettingsForAlgoritm(t){var r={name:t,hash:{name:"SHA-256"},length:256,modulusLength:204};return"AES-CBC"===t&&(r.iv=crypto.getRandomValues(new Uint8Array(16))),"AES-GCM"===t&&(r.tagLength=128,r.iv=crypto.getRandomValues(new Uint8Array(12))),"AES-CTR"===t&&(r.counter=new Uint8Array(16),r.length=128),r}export function createPassword(t){return Promise.resolve({algorithm:t,password:e(15)})}export function ab2b64(t){return r(String.fromCharCode.apply(null,new Uint8Array(t)))}export function b642ab(r){return Uint8Array.from(t(r),(t=>t.charCodeAt(0)))}export async function encryptString(t,r,e){var n=getSettingsForAlgoritm(r);return ab2b64(await crypto.subtle.encrypt(n,t,TEXT_ENCODER.encode(e)))+"."+ab2b64(n.iv)}export async function decryptString(t,r,e){var{0:n,1:o}=e.split("."),a=b642ab(o),i=b642ab(n),p=getSettingsForAlgoritm(r);p.iv=a;var E=await crypto.subtle.decrypt(p,t,i);return TEXT_DECODER.decode(E)}