import{createRevision as e,clone as t,randomCouchString as a,now as o,blobToBase64String as r}from"rxdb";export async function migrateStorage(e,t,a,o=10,r,n){var i=Object.values(e.collections);for(var c of i)await migrateCollection(c,t,a,o,r,n)}export async function migrateCollection(n,i,c,s,m,l){function w(e){l&&l("migrateCollection("+n.name+")"+e)}w("start migrateCollection()");for(var d=n.schema.jsonSchema,g=n.schema.primaryPath,v=a(10),h=await c.createStorageInstance({databaseName:i,collectionName:n.name,multiInstance:!1,options:{},schema:d,databaseInstanceToken:v}),u=c.statics.prepareQuery(d,{selector:{},limit:s,sort:[{[g]:"asc"}],skip:0}),p=async function(){w("loop once");var a=(await h.query(u)).documents;if(0===a.length)return w("migration of collection done"),await h.remove(),{v:void 0};var c=t(a);d.attachments&&(await Promise.all(a.map((async e=>{var t=e[g];await Promise.all(Object.entries(e._attachments).map((async([a,o])=>{var n=await h.getAttachmentData(t,a),i=await r(n);e._attachments[a]={data:i,digest:o.digest,length:o.length,type:o.type}})))}))),w("got attachments"));var s=a.map((e=>(e._meta||(e._meta={lwt:o()}),{document:e}))),l=await n.storageInstance.bulkWrite(s,"migrate-v11-to-old");w("written batch to new storage");var p=a.map(((a,o)=>{var r=c[o];r._meta||(r._meta={lwt:(new Date).getTime()});var n=t(r);return n._deleted=!0,n._meta||(n._meta={lwt:(new Date).getTime()}),n._meta.lwt=(new Date).getTime()+1,n._rev=e(v,r),{previous:r,document:n}}));try{var b=await h.bulkWrite(p,"migrate-between-rxdb-versions");if(Object.keys(b.error).length>0)throw console.dir({writeToOldRows:p,errors:b.error}),new Error("got error while deleting migrated documents on the old storage")}catch(e){throw w("could not delete on old instance"),console.dir(e),e}w("deleted batch on old storage"),await h.cleanup(0),m&&await m({databaseName:n.database.name,collectionName:n.name,oldDatabaseName:i,insertToNewWriteRows:s,writeToNewResult:l})};;){var b=await p();if("object"==typeof b)return b.v}}