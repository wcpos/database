import{createRevision as e,clone as a,randomCouchString as t,now as o,blobToBase64String as n}from"rxdb";export async function migrateStorage(e,a,t,o=10,n){var i=Object.values(e.collections);for(var r of i)await migrateCollection(r,a,t,o,n)}export async function migrateCollection(i,r,c,l,m){console.log("start migrateCollection() for "+i.name);for(var s=i.schema.jsonSchema,g=i.schema.primaryPath,w=t(10),d=await c.createStorageInstance({databaseName:r,collectionName:i.name,multiInstance:!1,options:{},schema:s,databaseInstanceToken:w}),v=c.statics.prepareQuery(s,{selector:{},limit:l,sort:[{[g]:"asc"}],skip:0}),u=async function(){console.log("migrateCollection("+i.name+") loop once");var t=(await d.query(v)).documents;if(0===t.length)return console.log("migrateCollection("+i.name+") migration of collection done"),await d.remove(),{v:void 0};var c=a(t);s.attachments&&await Promise.all(t.map((async e=>{var a=e[g];await Promise.all(Object.entries(e._attachments).map((async([t,o])=>{var i=await d.getAttachmentData(a,t),r=await n(i);e._attachments[t]={data:r,digest:o.digest,length:o.length,type:o.type}})))})));var l=t.map((e=>(e._meta||(e._meta={lwt:o()}),{document:e}))),u=await i.storageInstance.bulkWrite(l,"migrate-v11-to-old"),p=t.map(((t,o)=>{var n=c[o];n._meta||(n._meta={lwt:(new Date).getTime()});var i=a(n);return i._deleted=!0,i._meta||(i._meta={lwt:(new Date).getTime()}),i._meta.lwt=(new Date).getTime()+1,i._rev=e(w,n),{previous:n,document:i}}));try{await d.bulkWrite(p,"migrate-between-rxdb-versions")}catch(e){throw console.log("migrateCollection("+i.name+")- could not delete on old instance"),console.dir(e),e}await d.cleanup(0),m&&await m({databaseName:i.database.name,collectionName:i.name,oldDatabaseName:r,insertToNewWriteRows:l,writeToNewResult:u})};;){var p=await u();if("object"==typeof p)return p.v}}