import{ensureNotFalsy as e,promiseWait as t,PROMISE_RESOLVE_VOID as r,RxStorageDefaultStatics as n}from"rxdb";import{createIndexesOnStore as o}from"./indexeddb-index-helpers";export var INDEXEDDB_DOCS_STORE_SUFFIX="documents";export var INDEXEDDB_DOCS_STORE_ATTACHMENTS_SUFFIX="attachments";export var TRANSACTION_SETTINGS={durability:"relaxed"};export var RX_STORAGE_NAME_INDEXEDDB="indexeddb";export var RxStorageIndexedDBStatics=n;var a=0;export function attachmentObjectId(e,t){return e+"||"+t}var s=new Map;function c(t,n){var o=s.get(t);return o||(o=r),o=e(o).then((()=>n())),s.set(t,o),o}function i(e,r,n){var o=a++,s=n.indexedDB,i=async()=>(await t(0),c(e,(()=>new Promise(((t,r)=>{var n=s.open(e);n.onerror=function(t){console.error(o+": OPEN IDB DATABASE "+e+" ERROR"),r(t)},n.onsuccess=function(e){var r=n.result;t(r),d(u,r)},addStoresDuringOnUpgradeNeeded(u,n)}))))),u={debugId:o,closed:!1,storage:r,settings:n,refreshIDBDatabase:i,creationPromise:i(),name:e,refCount:0,storesToOpen:[]};return u}function d(e,t){t.onversionchange=r=>{e.closed||(t.close(),e.creationPromise=e.refreshIDBDatabase())}}export function getIndexedDBState(t,r,n,o){var a=t.indexedDBStates.get(n);return a||(a=i(n,t,r),t.indexedDBStates.set(n,a)),a.storesToOpen=a.storesToOpen.concat(o),a.refCount=a.refCount+1,a.creationPromise.then((()=>openStoresOnExistingDatabase(e(a)))).then((()=>e(a)))}var u=0;export function getDatabaseAddStoresCount(){return u}export async function openStoresOnExistingDatabase(e){var t=e.settings.indexedDB;if(0!==e.storesToOpen.length)return e.creationPromise=e.creationPromise.then((async r=>{var n=new Set(Array.from(r.objectStoreNames));if(0===e.storesToOpen.filter((e=>!n.has(getStoreNamesForStorageInstance(e.collectionName,e.schema).documentStore))).length)return r;u+=1;var o=r.version+1;return r.close(),c(e.name,(()=>new Promise((async(r,n)=>{var a=t.open(e.name,o);a.onerror=function(t){console.error(e.debugId+": ERROR openStoresOnExistingDatabase() openRequest: error "),n(t)},a.onsuccess=function(t){var n=a.result;d(e,n),r(n)},a.onblocked=e=>{},addStoresDuringOnUpgradeNeeded(e,a)}))))})),e.creationPromise}export function getStoreNamesForStorageInstance(e,t){var r=t.version;return{documentStore:e+"-"+r+"-"+INDEXEDDB_DOCS_STORE_SUFFIX,attachmentsStore:e+"-"+r+"-"+INDEXEDDB_DOCS_STORE_ATTACHMENTS_SUFFIX}}export function addStoresDuringOnUpgradeNeeded(e,t){t.onupgradeneeded=function(r){var n=t.result;e.storesToOpen.forEach((e=>{var t=n.objectStoreNames,r=getStoreNamesForStorageInstance(e.collectionName,e.schema);if(!t.contains(r.documentStore)){var a=n.createObjectStore(r.documentStore,{keyPath:"i",autoIncrement:!1});o(a,e),e.schema.attachments&&n.createObjectStore(r.attachmentsStore,{keyPath:"docIdWithAttachmentId",autoIncrement:!1})}})),e.storesToOpen=[]}}export async function closeIndexedDBDatabase(e){if(!e.closed&&(e.refCount=e.refCount-1,0===e.refCount))return e.closed=!0,e.storage.indexedDBStates.delete(e.name),e.creationPromise.then((e=>e.close()))}