import{getPrimaryFieldOfPrimaryKey as n,PROMISE_RESOLVE_VOID as t,cancelRxStorageReplication as e}from"rxdb";export var MemorySyncedRxStorageInstance=function(){function i(e,i,a,s,r,o){this.closed=!1,this.pendingWrites=new Map,this.persistingWritesQueue=t,this.storage=e,this.databaseName=i,this.collectionName=a,this.schema=s,this.internals=r,this.options=o,this.primaryPath=n(this.schema.primaryKey)}var a=i.prototype;return a.bulkWrite=async function(n,t){return await this.internals.initDonePromise,await this.internals.forkInstance.bulkWrite(n,t)},a.findDocumentsById=async function(n,t){return await this.internals.initDonePromise,this.internals.forkInstance.findDocumentsById(n,t)},a.query=async function(n){return await this.internals.initDonePromise,this.internals.forkInstance.query(n)},a.count=async function(n){return await this.internals.initDonePromise,this.internals.forkInstance.count(n)},a.getAttachmentData=async function(n,t){return await this.internals.initDonePromise,this.internals.forkInstance.getAttachmentData(n,t)},a.getChangedDocumentsSince=async function(n,t){return await this.internals.initDonePromise,this.internals.forkInstance.getChangedDocumentsSince(n,t)},a.changeStream=function(){return this.internals.forkInstance.changeStream()},a.cleanup=function(n){return this.internals.initDonePromise.then((()=>awaitReplicationInSync(this))).then((()=>Promise.all([this.internals.forkInstance.cleanup(n),this.internals.masterInstancePromise.then((t=>t.cleanup(n))),this.internals.metaInstancePromise.then((t=>t.cleanup(n)))]))).then((([n,t,e])=>n&&t&&e))},a.close=async function(){await this.internals.initDonePromise,await awaitReplicationInSync(this);var n=await this.internals.replicationStatePromise;await e(n),await Promise.all([this.internals.forkInstance.close(),this.internals.masterInstancePromise.then((n=>n.close())),this.internals.metaInstancePromise.then((n=>n.close()))])},a.remove=async function(){await this.internals.initDonePromise,await awaitReplicationInSync(this);var n=await this.internals.replicationStatePromise;await e(n),await Promise.all([this.internals.forkInstance.remove(),this.internals.masterInstancePromise.then((n=>n.remove())),this.internals.metaInstancePromise.then((n=>n.remove()))])},a.conflictResultionTasks=function(){return this.internals.conflictTasks$.asObservable()},a.resolveConflictResultionTask=function(n){return this.internals.resolvedConflictTasks$.next(n),t},i}();export function awaitReplicationInSync(n){return n.internals.initDonePromise.then((()=>n.internals.replicationStatePromise)).then((async n=>{await n.streamQueue.down,await n.streamQueue.up}))}