import{clone as e,ensureRxStorageInstanceParamsAreCorrect as a,flatClone as r,getQueryMatcher as t,getSortComparator as s}from"rxdb";import{checkVersion as n}from"../../shared/version-check";import{RxStorageInstanceSharding as o}from"./rx-storage-instance-sharding";export*from"./rx-storage-instance-sharding";export*from"./sharding-helper";export*from"./sharding-types";export function getRxStorageSharding(i){var c={name:"sharding",statics:Object.assign({},i.storage.statics,{prepareQuery(a,t){t=r(t);var s=e(t);return t.skip=0,t.limit&&(t.limit=t.limit+s.skip),{originalQuery:s,parentPreparedQuery:i.storage.statics.prepareQuery(a,t)}},getSortComparator:(e,a)=>s(e,a.parentPreparedQuery),getQueryMatcher:(e,a)=>t(e,a.parentPreparedQuery),checkpointSchema:{type:"object",properties:{},additionalProperties:!0}}),async createStorageInstance(e){a(e),n();var r=e.schema.sharding?e.schema.sharding.shards:2,t=e.schema.sharding?e.schema.sharding.mode:"collection",s={shardInstances:await Promise.all(new Array(r).fill(0).map(((a,s)=>{var n="-"+s+"-of-"+r,o=e.databaseName+("database"===t?n:""),c=e.collectionName+("collection"===t?n:"");return i.storage.createStorageInstance({databaseInstanceToken:e.databaseInstanceToken,databaseName:o,collectionName:c,multiInstance:e.multiInstance,options:e.options?e.options.parentOptions:{},schema:e.schema,devMode:e.devMode})})))};return new o(c,e.databaseName,e.collectionName,e.schema,s,e.options)}};return c}