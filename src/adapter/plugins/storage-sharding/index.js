import{clone as e,ensureRxStorageInstanceParamsAreCorrect as a,flatClone as r}from"rxdb";import{RxStorageInstanceSharding as t}from"./rx-storage-instance-sharding";export*from"./rx-storage-instance-sharding";export*from"./sharding-helper";export*from"./sharding-types";export function getRxStorageSharding(s){var n={name:"sharding",statics:Object.assign({},s.storage.statics,{prepareQuery(a,t){t=r(t);var n=e(t);return t.skip=0,t.limit&&(t.limit=t.limit+n.skip),{originalQuery:n,parentPreparedQuery:s.storage.statics.prepareQuery(a,t)}},getSortComparator:(e,a)=>s.storage.statics.getSortComparator(e,a.parentPreparedQuery),getQueryMatcher:(e,a)=>s.storage.statics.getQueryMatcher(e,a.parentPreparedQuery),checkpointSchema:{type:"object",properties:{},additionalProperties:!0}}),async createStorageInstance(e){a(e);var r=e.schema.sharding?e.schema.sharding.shards:2,o=e.schema.sharding?e.schema.sharding.mode:"collection",i={shardInstances:await Promise.all(new Array(r).fill(0).map(((a,t)=>{var n="-"+t+"-of-"+r,i=e.databaseName+("database"===o?n:""),c=e.collectionName+("collection"===o?n:"");return s.storage.createStorageInstance({databaseInstanceToken:e.databaseInstanceToken,databaseName:i,collectionName:c,multiInstance:e.multiInstance,options:e.options?e.options.parentOptions:{},schema:e.schema})})))};return new t(n,e.databaseName,e.collectionName,e.schema,i,e.options)}};return n}