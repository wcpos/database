var e=new WeakMap;export function getSQLiteBasicsNode(r){var a=e.get(r);return a||(a={open:e=>Promise.resolve(new r.Database(e)),async run(e,r){if(!Array.isArray(r.params))throw console.dir(r),new Error("no params array given for query: "+r.query);await execSqlSQLiteNode(e,r,"run")},all:async(e,r)=>await execSqlSQLiteNode(e,r,"all"),setPragma:async(e,r,a)=>execSqlSQLiteNode(e,{query:"PRAGMA "+r+" = "+a,params:[]},"run"),close:e=>closeSQLiteDatabaseNode(e),journalMode:"WAL2"},e.set(r,a)),a}export function execSqlSQLiteNode(e,r,a){var o=!1,s=!1;return new Promise(((n,t)=>{o&&console.log("# execSqlSQLiteNode() "+r.query),e[a](r.query,r.params,((a,c)=>{if(s)throw new Error("callback called mutliple times "+r.query);s=!0,a?(o&&(console.log("---- ERROR RUNNING SQL:"),console.log(r.query),console.dir(r.params),console.dir(a),console.log("----")),t(a)):(o&&(console.log("execSql() result: "+e.eventNames()),console.log(r.query),console.dir(c),console.log("execSql() result:"),console.log(r.query),console.dir(r.params),console.log("execSql() result -------------------------")),n(c))}))}))}export function closeSQLiteDatabaseNode(e){return new Promise(((r,a)=>{var o=!1;e.close((e=>{if(o)throw new Error("close() callback called mutliple times");o=!0,e&&!e.message.includes("Database is closed")?a(e):r()}))}))}import{ensureNotFalsy as r}from"rxdb";var a=new WeakMap;export function getSQLiteBasicsCapacitor(o,s){var n=a.get(o);return n||(n={async open(e){var r=await o.createConnection(e,!1,"no-encryption",1);return await r.open(),r},async run(e,r){await e.run(r.query,r.params,!1)},async all(e,a){var o=await e.query(a.query,a.params);return r(o.values)},setPragma:async(e,r,a)=>e.execute("PRAGMA "+r+" = "+a,!1),close:e=>e.close(),journalMode:"android"===s.getPlatform()?"":"WAL"},e.set(o,n)),n}export var EMPTY_FUNCTION=()=>{};export function getSQLiteBasicsQuickSQLite(e){return{open:async r=>e({name:r}),all:async(e,r)=>(await e.executeAsync(r.query,r.params)).rows._array,run:async(e,r)=>e.executeAsync(r.query,r.params),setPragma:async(e,r,a)=>e.executeAsync("PRAGMA "+r+" = "+a,[]),close:async e=>{e.close(EMPTY_FUNCTION,EMPTY_FUNCTION)},journalMode:""}}export function getSQLiteBasicsExpoSQLite(e){return{open:async r=>Promise.resolve(e(r)),all:async(e,r)=>new Promise(((a,o)=>{e.exec([{sql:r.query,args:r.params}],!1,((e,r)=>{if(e)return o(e);if(Array.isArray(r)){var s=r[0];return Object.prototype.hasOwnProperty.call(s,"rows")?a(s.rows):o(s.error)}return o(new Error("getSQLiteBasicsExpoSQLite.all() response is not an array: "+r))}))})),run:async(e,r)=>new Promise(((a,o)=>{e.exec([{sql:r.query,args:r.params}],!1,((e,r)=>e?o(e):Array.isArray(r)&&r[0]&&r[0].error?o(r):void a(r)))})),setPragma:(e,r,a)=>new Promise(((o,s)=>{e.exec([{sql:"pragma "+r+" = "+a+";",args:[]}],!1,((e,r)=>e?s(e):Array.isArray(r)&&r[0]&&r[0].error?s(r):void o(r)))})),close:async e=>e.closeAsync(),journalMode:""}}export function getSQLiteBasicsWebSQL(e){return{open:async r=>Promise.resolve(e(r)),all:async(e,r)=>new Promise(((a,o)=>{e.transaction((function(e){e.executeSql(r.query,r.params,((e,r)=>{var o=Array.from(r.rows);a(o)}),(e=>o(e)))}))})),run:async(e,r)=>new Promise(((a,o)=>{e.transaction((function(e){e.executeSql(r.query,r.params,((e,r)=>{a()}),(e=>o(e)))}))})),setPragma:(e,r,a)=>new Promise(((o,s)=>{e.transaction((function(e){e.executeSql("pragma "+r+" = "+a+";",[],((e,r)=>{o()}),(e=>s(e)))}))})),close:async e=>e.closeAsync(),journalMode:""}}