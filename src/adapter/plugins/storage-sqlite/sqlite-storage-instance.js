import{getPrimaryFieldOfPrimaryKey as t,categorizeBulkWriteRows as a,isMaybeReadonlyArray as e,ensureNotFalsy as s,sortDocumentsByLastWriteTime as i,addRxStorageMultiInstanceSupport as n,PROMISE_RESOLVE_VOID as r,lastOfArray as c,getFromMapOrThrow as o,promiseWait as h}from"rxdb";import{Subject as l}from"rxjs";import{RxStorageSQLiteStatics as m}from"./sqlite-statics";import{attachmentRowKey as d,closeDatabaseConnection as u,getDatabaseConnection as p,getIndexId as E,getJsonExtract as N,getSQLiteFindByIdSQL as T,getSQLiteUpdateSQL as y,RX_STORAGE_NAME_SQLITE as I,sqliteTransaction as w}from"./sqlite-helpers";var q=0;export var RxStorageInstanceSQLite=function(){function e(a,e,s,i,n,r,c){this.changes$=new l,this.instanceId=q++,this.closed=!1,this.storage=a,this.databaseName=e,this.collectionName=s,this.schema=i,this.internals=n,this.options=r,this.settings=c,this.sqliteBasics=a.settings.sqliteBasics,this.primaryPath=t(this.schema.primaryKey)}var n=e.prototype;return n.bulkWrite=async function(t,e){var i,n=await this.internals.databasePromise,r={success:{},error:{}},c=t.map((t=>t.document[this.primaryPath])),h=[];if(await w(n,this.sqliteBasics,(async()=>{var s=await this.sqliteBasics.all(n,{query:'SELECT data FROM "'+this.collectionName+'" WHERE id IN ('+c.map((()=>"?")).join(", ")+")",params:c}),l=new Map;s.forEach((t=>{var a=JSON.parse(t.data),e=a[this.primaryPath];l.set(e,a)})),i=a(this,this.primaryPath,l,t,e);var m=new Map;if(i.bulkInsertDocs.length>0){var u='INSERT INTO "'+this.collectionName+'"(\n                        id,\n                        revision,\n                        deleted,\n                        lastWriteTime,\n                        data\n                    ) VALUES '+new Array(i.bulkInsertDocs.length).fill("(?, ?, ?, ?, ?)").join(", ")+";",p=[];i.bulkInsertDocs.forEach((t=>{var a=t.document,e=a[this.primaryPath];m.set(e,a),p.push(e),p.push(a._rev),p.push(a._deleted?1:0),p.push(a._meta.lwt),p.push(JSON.stringify(a)),r.success[a[this.primaryPath]]=a})),h.push(this.sqliteBasics.run(n,{query:u,params:p}))}return i.bulkUpdateDocs.length>0&&i.bulkUpdateDocs.forEach((t=>{var a=t.document[this.primaryPath];m.set(a,t.document),r.success[a]=t.document,h.push(this.sqliteBasics.run(n,y(this.collectionName,this.primaryPath,t)))})),i.attachmentsAdd.forEach((t=>{var a=this.sqliteBasics.all(n,{query:'\n                                INSERT INTO\n                                    "'+this.collectionName+'_attachments"(\n                                        docIdWithAttachmentId,\n                                        digest,\n                                        length,\n                                        type,\n                                        data\n                                    )\n                                VALUES(?, ?, ?, ?, ?)\n                            ',params:[d(t.documentId,t.attachmentId),o(m,t.documentId)._attachments[t.attachmentId].digest,t.attachmentData.length,t.attachmentData.type,this.storage.base64AttachmentToStoredAttachmentsData(t.attachmentData.data)]});h.push(a)})),i.attachmentsRemove.forEach((t=>{var a=this.sqliteBasics.all(n,{query:'\n                            DELETE FROM\n                                "'+this.collectionName+'_attachments"\n                            WHERE\n                                docIdWithAttachmentId = ?\n                            ',params:[d(t.documentId,t.attachmentId)]});h.push(a)})),i.attachmentsUpdate.forEach((t=>{var a=this.sqliteBasics.all(n,{query:'\n                            UPDATE "'+this.collectionName+'_attachments"\n                            SET\n                                digest = ?,\n                                length = ?,\n                                type = ?,\n                                data = ?\n                            WHERE\n                                docIdWithAttachmentId = ?\n                            ',params:[o(m,t.documentId)._attachments[t.attachmentId].digest,t.attachmentData.length,t.attachmentData.type,this.storage.base64AttachmentToStoredAttachmentsData(t.attachmentData.data),d(t.documentId,t.attachmentId)]});h.push(a)})),r.error=i.errors,await Promise.all(h),this.closed?"ROLLBACK":"COMMIT"}),{databaseName:this.databaseName,collectionName:this.collectionName}),(i=s(i)).eventBulk.events.length>0){var l=s(i.newestRow).document;i.eventBulk.checkpoint={id:l[this.primaryPath],lwt:l._meta.lwt},this.changes$.next(i.eventBulk)}return r},n.query=async function(t){var a=await this.internals.databasePromise;if(await this.internals.indexCreationPromise,t.nonImplementedOperator){for(var e=t.mangoQuery,s=e.skip?e.skip:0,i=s+(e.limit?e.limit:1/0),n=[],r=m.getQueryMatcher(this.schema,t),c=0,o=!1;!1===o;){var h=await this.sqliteBasics.all(a,{query:'SELECT data FROM "'+this.collectionName+'" '+t.sqlQuery.query+" OFFSET "+c,params:t.sqlQuery.params});c+=h.length,h.forEach((t=>{var a=JSON.parse(t.data);r(a)&&n.push(a)})),(0===h.length||n.length>=i)&&(o=!0)}return{documents:n=n.slice(s,i)}}return{documents:(await this.sqliteBasics.all(a,{query:'SELECT data FROM "'+this.collectionName+'" '+t.sqlQuery.query,params:t.sqlQuery.params})).map((t=>JSON.parse(t.data)))}},n.count=async function(t){var a=await this.internals.databasePromise;return await this.internals.indexCreationPromise,{count:(await this.sqliteBasics.all(a,{query:'SELECT COUNT(1) as count FROM "'+this.collectionName+'" '+t.queryWithoutSort,params:t.sqlQuery.params}))[0].count,mode:"fast"}},n.findDocumentsById=async function(t,a){for(var e=await this.internals.databasePromise,s=await this.sqliteBasics.all(e,T(this.collectionName,t,a)),i={},n=0;n<s.length;++n){var r=s[n];i[r.id]=JSON.parse(r.data)}return i},n.getChangedDocumentsSince=async function(t,a){var e,s=await this.internals.databasePromise;await this.internals.indexCreationPromise,e=a?[{wherePart:"WHERE lastWriteTime > (?)",params:[a.lwt]},{wherePart:"WHERE lastWriteTime = (?) AND id > (?)",params:[a.lwt,a.id]}]:[{wherePart:"",params:[]}];var n=[];await Promise.all(e.map((async a=>{var e='\n                    SELECT *\n                    FROM "'+this.collectionName+'"\n                    '+a.wherePart+"\n                    ORDER BY \n                        lastWriteTime ASC,\n                        id ASC\n                    LIMIT "+t+"\n                    ;\n                ";(await this.sqliteBasics.all(s,{query:e,params:a.params})).forEach((t=>{n.push(JSON.parse(t.data))}))}))),n=(n=i(this.primaryPath,n)).slice(0,t);var r=c(n);return{documents:n,checkpoint:r?{id:r[this.primaryPath],lwt:r._meta.lwt}:a||{id:"",lwt:0}}},n.changeStream=function(){return this.changes$.asObservable()},n.cleanup=async function(t){var a=await this.internals.databasePromise;await this.internals.indexCreationPromise;var e=(new Date).getTime()-t;return await this.sqliteBasics.all(a,{query:'\n                    DELETE FROM\n                        "'+this.collectionName+'"\n                    WHERE\n                        deleted = 1\n                        AND\n                        lastWriteTime < ?\n                ',params:[e]}),await this.sqliteBasics.run(a,{query:"pragma optimize;",params:[]}),!0},n.remove=async function(){var t=await this.internals.databasePromise;await this.internals.indexCreationPromise;var a=[this.sqliteBasics.run(t,{query:'DROP TABLE IF EXISTS "'+this.collectionName+'"',params:[]})];return this.schema.attachments&&a.push(this.sqliteBasics.run(t,{query:'DROP TABLE IF EXISTS "'+this.collectionName+'_attachments"',params:[]})),await Promise.all(a),this.close()},n.getAttachmentData=async function(t,a){var e=await this.internals.databasePromise,s='\n        SELECT data\n        FROM "'+this.collectionName+'_attachments"\n        WHERE\n            docIdWithAttachmentId = ?\n        LIMIT 1\n        ;',i=await this.sqliteBasics.all(e,{query:s,params:[d(t,a)]});return this.storage.storedAttachmentsDataToBase64(i[0].data)},n.close=async function(){if(await this.internals.databasePromise,await this.internals.indexCreationPromise,this.closed)throw new Error("Cannot close already closed database "+this.databaseName+"-"+this.collectionName);return this.closed=!0,this.changes$.complete(),u(this.databaseName,this.storage.settings.sqliteBasics)},n.conflictResultionTasks=function(){return(new l).asObservable()},n.resolveConflictResultionTask=function(t){return r},e}();export async function createSQLiteStorageInstance(a,s,i){var r=t(s.schema.primaryKey),c=i.sqliteBasics,o={},l=[];o.databasePromise=p(a.settings.sqliteBasics,s.databaseName).then((async t=>(await w(t,c,(async()=>(l.push(c.run(t,{query:'\n                            CREATE TABLE IF NOT EXISTS "'+s.collectionName+'"(\n                                id TEXT NOT NULL PRIMARY KEY,\n                                revision TEXT,\n                                deleted BOOLEAN NOT NULL CHECK (deleted IN (0, 1)),\n                                lastWriteTime INTEGER NOT NULL,\n                                data json\n                            ) WITHOUT ROWID;\n                        ',params:[]})),s.schema.attachments&&l.push(c.run(t,{query:'\n                                    CREATE TABLE IF NOT EXISTS "'+s.collectionName+'_attachments"(\n                                        docIdWithAttachmentId TEXT NOT NULL PRIMARY KEY,\n                                        digest TEXT NOT NULL,\n                                        length INTEGER NOT NULL,\n                                        type TEXT NOT NULL,\n                                        data BLOB\n                                    ) WITHOUT ROWID;\n                                ',params:[]})),await Promise.all(l),"COMMIT")),{indexCreation:!1,databaseName:s.databaseName,collectionName:s.collectionName}),t))),o.indexCreationPromise=o.databasePromise.then((async t=>{await h(0),await w(t,c,(async()=>{var a=s.schema.indexes?s.schema.indexes.map((t=>e(t)?t:[t])):[];return a.push(["deleted","lastWriteTime"]),a.push(["lastWriteTime","id"]),await Promise.all(a.map((a=>{var i=e(a)?a:[a],n=E(i),o=i.map((t=>N(r,t)));o.push("deleted");var h='CREATE INDEX IF NOT EXISTS "'+n+'" ON "'+s.collectionName+'"('+o.join(", ")+");";return c.run(t,{query:h,params:[]})}))),"COMMIT"}),{indexCreation:!0,databaseName:s.databaseName,collectionName:s.collectionName})}));var m=new RxStorageInstanceSQLite(a,s.databaseName,s.collectionName,s.schema,o,s.options,i);return n(I,s,m),m}