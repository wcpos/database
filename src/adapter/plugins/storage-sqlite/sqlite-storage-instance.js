import{getPrimaryFieldOfPrimaryKey as a,categorizeBulkWriteRows as t,isMaybeReadonlyArray as e,ensureNotFalsy as s,sortDocumentsByLastWriteTime as i,addRxStorageMultiInstanceSupport as n,PROMISE_RESOLVE_VOID as r,lastOfArray as h,getFromMapOrThrow as m,promiseWait as c}from"rxdb";import{Subject as l}from"rxjs";import{RxStorageSQLiteStatics as o}from"./sqlite-statics";import{attachmentRowKey as d,closeDatabaseConnection as u,getDatabaseConnection as p,getIndexId as E,getJsonExtract as N,getSQLiteFindByIdSQL as T,getSQLiteUpdateSQL as y,RX_STORAGE_NAME_SQLITE as I,sqliteTransaction as w}from"./sqlite-helpers";var b=0;export var RxStorageInstanceSQLite=function(){function e(t,e,s,i,n,r,h,m){this.changes$=new l,this.instanceId=b++,this.closed=!1,this.storage=t,this.databaseName=e,this.collectionName=s,this.schema=i,this.internals=n,this.options=r,this.settings=h,this.tableName=m,this.sqliteBasics=t.settings.sqliteBasics,this.primaryPath=a(this.schema.primaryKey)}var n=e.prototype;return n.bulkWrite=async function(a,e){var i,n=await this.internals.databasePromise,r={success:{},error:{}},h=a.map((a=>a.document[this.primaryPath])),c=[];if(await w(n,this.sqliteBasics,(async()=>{var s=await this.sqliteBasics.all(n,{query:'SELECT data FROM "'+this.tableName+'" WHERE id IN ('+h.map((()=>"?")).join(", ")+")",params:h}),l=new Map;s.forEach((a=>{var t=JSON.parse(a.data),e=t[this.primaryPath];l.set(e,t)})),i=t(this,this.primaryPath,l,a,e);var o=new Map;if(i.bulkInsertDocs.length>0){var u='INSERT INTO "'+this.tableName+'"(\n                        id,\n                        revision,\n                        deleted,\n                        lastWriteTime,\n                        data\n                    ) VALUES '+new Array(i.bulkInsertDocs.length).fill("(?, ?, ?, ?, ?)").join(", ")+";",p=[];i.bulkInsertDocs.forEach((a=>{var t=a.document,e=t[this.primaryPath];o.set(e,t),p.push(e),p.push(t._rev),p.push(t._deleted?1:0),p.push(t._meta.lwt),p.push(JSON.stringify(t)),r.success[t[this.primaryPath]]=t})),c.push(this.sqliteBasics.run(n,{query:u,params:p}))}return i.bulkUpdateDocs.length>0&&i.bulkUpdateDocs.forEach((a=>{var t=a.document[this.primaryPath];o.set(t,a.document),r.success[t]=a.document,c.push(this.sqliteBasics.run(n,y(this.tableName,this.primaryPath,a)))})),i.attachmentsAdd.forEach((a=>{var t=this.sqliteBasics.all(n,{query:'\n                                INSERT INTO\n                                    "'+this.tableName+'_attachments"(\n                                        docIdWithAttachmentId,\n                                        digest,\n                                        length,\n                                        type,\n                                        data\n                                    )\n                                VALUES(?, ?, ?, ?, ?)\n                            ',params:[d(a.documentId,a.attachmentId),m(o,a.documentId)._attachments[a.attachmentId].digest,a.attachmentData.length,a.attachmentData.type,this.storage.base64AttachmentToStoredAttachmentsData(a.attachmentData.data)]});c.push(t)})),i.attachmentsRemove.forEach((a=>{var t=this.sqliteBasics.all(n,{query:'\n                            DELETE FROM\n                                "'+this.tableName+'_attachments"\n                            WHERE\n                                docIdWithAttachmentId = ?\n                            ',params:[d(a.documentId,a.attachmentId)]});c.push(t)})),i.attachmentsUpdate.forEach((a=>{var t=this.sqliteBasics.all(n,{query:'\n                            UPDATE "'+this.tableName+'_attachments"\n                            SET\n                                digest = ?,\n                                length = ?,\n                                type = ?,\n                                data = ?\n                            WHERE\n                                docIdWithAttachmentId = ?\n                            ',params:[m(o,a.documentId)._attachments[a.attachmentId].digest,a.attachmentData.length,a.attachmentData.type,this.storage.base64AttachmentToStoredAttachmentsData(a.attachmentData.data),d(a.documentId,a.attachmentId)]});c.push(t)})),r.error=i.errors,await Promise.all(c),this.closed?"ROLLBACK":"COMMIT"}),{databaseName:this.databaseName,collectionName:this.collectionName}),(i=s(i)).eventBulk.events.length>0){var l=s(i.newestRow).document;i.eventBulk.checkpoint={id:l[this.primaryPath],lwt:l._meta.lwt},this.changes$.next(i.eventBulk)}return r},n.query=async function(a){var t=await this.internals.databasePromise;if(await this.internals.indexCreationPromise,a.nonImplementedOperator){for(var e=a.mangoQuery,s=e.skip?e.skip:0,i=s+(e.limit?e.limit:1/0),n=[],r=o.getQueryMatcher(this.schema,a),h=0,m=!1;!1===m;){var c=await this.sqliteBasics.all(t,{query:'SELECT data FROM "'+this.tableName+'" '+a.sqlQuery.query+" OFFSET "+h,params:a.sqlQuery.params});h+=c.length,c.forEach((a=>{var t=JSON.parse(a.data);r(t)&&n.push(t)})),(0===c.length||n.length>=i)&&(m=!0)}return{documents:n=n.slice(s,i)}}return{documents:(await this.sqliteBasics.all(t,{query:'SELECT data FROM "'+this.tableName+'" '+a.sqlQuery.query,params:a.sqlQuery.params})).map((a=>JSON.parse(a.data)))}},n.count=async function(a){var t=await this.internals.databasePromise;return await this.internals.indexCreationPromise,{count:(await this.sqliteBasics.all(t,{query:'SELECT COUNT(1) as count FROM "'+this.tableName+'" '+a.queryWithoutSort,params:a.sqlQuery.params}))[0].count,mode:"fast"}},n.findDocumentsById=async function(a,t){for(var e=await this.internals.databasePromise,s=await this.sqliteBasics.all(e,T(this.tableName,a,t)),i={},n=0;n<s.length;++n){var r=s[n];i[r.id]=JSON.parse(r.data)}return i},n.getChangedDocumentsSince=async function(a,t){var e,s=await this.internals.databasePromise;await this.internals.indexCreationPromise,e=t?[{wherePart:"WHERE lastWriteTime > (?)",params:[t.lwt]},{wherePart:"WHERE lastWriteTime = (?) AND id > (?)",params:[t.lwt,t.id]}]:[{wherePart:"",params:[]}];var n=[];await Promise.all(e.map((async t=>{var e='\n                    SELECT *\n                    FROM "'+this.tableName+'"\n                    '+t.wherePart+"\n                    ORDER BY \n                        lastWriteTime ASC,\n                        id ASC\n                    LIMIT "+a+"\n                    ;\n                ";(await this.sqliteBasics.all(s,{query:e,params:t.params})).forEach((a=>{n.push(JSON.parse(a.data))}))}))),n=(n=i(this.primaryPath,n)).slice(0,a);var r=h(n);return{documents:n,checkpoint:r?{id:r[this.primaryPath],lwt:r._meta.lwt}:t||{id:"",lwt:0}}},n.changeStream=function(){return this.changes$.asObservable()},n.cleanup=async function(a){var t=await this.internals.databasePromise;await this.internals.indexCreationPromise;var e=(new Date).getTime()-a;return await this.sqliteBasics.all(t,{query:'\n                    DELETE FROM\n                        "'+this.tableName+'"\n                    WHERE\n                        deleted = 1\n                        AND\n                        lastWriteTime < ?\n                ',params:[e]}),await this.sqliteBasics.run(t,{query:"pragma optimize;",params:[]}),!0},n.remove=async function(){var a=await this.internals.databasePromise;await this.internals.indexCreationPromise;var t=[this.sqliteBasics.run(a,{query:'DROP TABLE IF EXISTS "'+this.tableName+'"',params:[]})];return this.schema.attachments&&t.push(this.sqliteBasics.run(a,{query:'DROP TABLE IF EXISTS "'+this.tableName+'_attachments"',params:[]})),await Promise.all(t),this.close()},n.getAttachmentData=async function(a,t){var e=await this.internals.databasePromise,s='\n        SELECT data\n        FROM "'+this.tableName+'_attachments"\n        WHERE\n            docIdWithAttachmentId = ?\n        LIMIT 1\n        ;',i=await this.sqliteBasics.all(e,{query:s,params:[d(a,t)]});return this.storage.storedAttachmentsDataToBase64(i[0].data)},n.close=async function(){if(await this.internals.databasePromise,await this.internals.indexCreationPromise,this.closed)throw new Error("Cannot close already closed database "+this.databaseName+"-"+this.collectionName);return this.closed=!0,this.changes$.complete(),u(this.databaseName,this.storage.settings.sqliteBasics)},n.conflictResultionTasks=function(){return(new l).asObservable()},n.resolveConflictResultionTask=function(a){return r},e}();export async function createSQLiteStorageInstance(t,s,i){var r=a(s.schema.primaryKey),h=i.sqliteBasics,m=s.collectionName+"-"+s.schema.version,l={},o=[];l.databasePromise=p(t.settings.sqliteBasics,s.databaseName).then((async a=>(await w(a,h,(async()=>(o.push(h.run(a,{query:'\n                            CREATE TABLE IF NOT EXISTS "'+m+'"(\n                                id TEXT NOT NULL PRIMARY KEY,\n                                revision TEXT,\n                                deleted BOOLEAN NOT NULL CHECK (deleted IN (0, 1)),\n                                lastWriteTime INTEGER NOT NULL,\n                                data json\n                            ) WITHOUT ROWID;\n                        ',params:[]})),s.schema.attachments&&o.push(h.run(a,{query:'\n                                    CREATE TABLE IF NOT EXISTS "'+m+'_attachments"(\n                                        docIdWithAttachmentId TEXT NOT NULL PRIMARY KEY,\n                                        digest TEXT NOT NULL,\n                                        length INTEGER NOT NULL,\n                                        type TEXT NOT NULL,\n                                        data BLOB\n                                    ) WITHOUT ROWID;\n                                ',params:[]})),await Promise.all(o),"COMMIT")),{indexCreation:!1,databaseName:s.databaseName,collectionName:s.collectionName}),a))),l.indexCreationPromise=l.databasePromise.then((async a=>{await c(0),await w(a,h,(async()=>{var t=s.schema.indexes?s.schema.indexes.map((a=>e(a)?a:[a])):[];return t.push(["deleted","lastWriteTime"]),t.push(["lastWriteTime","id"]),await Promise.all(t.map((t=>{var s=e(t)?t:[t],i=E(s),n=s.map((a=>N(r,a)));n.push("deleted");var c='CREATE INDEX IF NOT EXISTS "'+i+'" ON "'+m+'"('+n.join(", ")+");";return h.run(a,{query:c,params:[]})}))),"COMMIT"}),{indexCreation:!0,databaseName:s.databaseName,collectionName:s.collectionName})}));var d=new RxStorageInstanceSQLite(t,s.databaseName,s.collectionName,s.schema,l,s.options,i,m);return n(I,s,d),d}